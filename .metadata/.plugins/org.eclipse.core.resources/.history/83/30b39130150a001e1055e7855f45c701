package org.jsp.springbootuserapp.service;

import java.util.List;
import java.util.Optional;

import org.jsp.springbootuserapp.dao.UserDao;
import org.jsp.springbootuserapp.dto.ResponseStructure;
import org.jsp.springbootuserapp.dto.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class UserService {
	@Autowired
	private UserDao dao;

	public ResponseEntity<ResponseStructure<User>> saveUser(User user) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		structure.setMessage("user registered succesfully");
		structure.setBody(dao.saveUser(user));
		structure.setCode(HttpStatus.CREATED.value());
		return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.CREATED);
	}

	public ResponseEntity<ResponseStructure<User>> updateUser(User user) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		structure.setMessage("user updated succesfully");
		structure.setBody(dao.saveUser(user));
		structure.setCode(HttpStatus.ACCEPTED.value());
		return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.ACCEPTED);
	}

	public ResponseEntity<ResponseStructure<User>> findUser(int id) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> recUser = dao.findUser(id);
		if (recUser.isPresent()) {
			structure.setMessage("user found");
			structure.setBody(recUser.get());
			structure.setCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.OK);
		}
		structure.setMessage("user not found");
		structure.setBody(null);
		structure.setCode(HttpStatus.NOT_FOUND.value());
		return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.NOT_FOUND);
	}

	public ResponseEntity<ResponseStructure<List<User>>> findAllUser() {
		ResponseStructure<List<User>> structure = new ResponseStructure<>();
		structure.setMessage("All users are displayed");
		structure.setBody(dao.findAllUser());
		structure.setCode(HttpStatus.OK.value());
		return new ResponseEntity<ResponseStructure<List<User>>>(structure, HttpStatus.OK);
	}

	public ResponseEntity<ResponseStructure<String>> deleteUser(int id) {
		ResponseStructure<String> structure = new ResponseStructure<>();
		Optional<User> recUser = dao.findUser(id);
		if (recUser.isPresent()) {
			dao.deleteUser(id);
			structure.setMessage("user found");
			structure.setBody("user deleted");
			structure.setCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.OK);
		}
		structure.setMessage("user not found");
		structure.setBody("user not deleted");
		structure.setCode(HttpStatus.NOT_FOUND.value());
		return new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.NOT_FOUND);
	}

//	public ResponseEntity<ResponseStructure<User>> verifyUser(long phone, String password) {
//		ResponseStructure<User> structure = new ResponseStructure<>();
//		Optional<User> recUser = dao.verifyUser(phone, password);
//		if (recUser.isPresent()) {
//			structure.setMessage("user verified succesfully");
//			structure.setBody(recUser.get());
//			structure.setCode(HttpStatus.OK.value());
//			return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.OK);
//		}
//		structure.setMessage("invalid phone or password");
//		structure.setBody(null);
//		structure.setCode(HttpStatus.NOT_FOUND.value());
//		return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.NOT_FOUND);
//	}
//
//	public ResponseEntity<ResponseStructure<User>> verifyUser(String email, String password) {
//		ResponseStructure<User> structure = new ResponseStructure<>();
//		Optional<User> recUser = dao.verifyUser(email, password);
//		if (recUser.isPresent()) {
//			structure.setMessage("user verified succesfully");
//			structure.setBody(recUser.get());
//			structure.setCode(HttpStatus.OK.value());
//			return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.OK);
//		}
//		structure.setMessage("invalid email or password");
//		structure.setBody(null);
//		structure.setCode(HttpStatus.NOT_FOUND.value());
//		return new ResponseEntity<ResponseStructure<User>>(structure, HttpStatus.NOT_FOUND);
//	}
}
